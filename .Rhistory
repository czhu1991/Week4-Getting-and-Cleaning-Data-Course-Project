best <- function(state, outcome) {
## Read outcome data
data <- outcome1
fd   <- as.data.frame(cbind(data[, 2],   # hospital
data[, 7],   # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if(!state %in% fd[, "state"]){
stop('invalid state')
} else if(!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]    # extracting data for the called state
oi <- as.numeric(ts[, eval(outcome)])
min_val <- min(oi, na.rm = TRUE)
result  <- ts[, "hospital"][which(oi == min_val)]
output  <- result[order(result)]
}
return(output)
}
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("D:/Coursera/R Programming/rprog_data_ProgAssignment3/outcome-of-care-measures.csv", colClasses = "character")
fd   <- as.data.frame(cbind(data[, 2],   # hospital
data[, 7],   # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if(!state %in% fd[, "state"]){
stop('invalid state')
} else if(!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]    # extracting data for the called state
oi <- as.numeric(ts[, eval(outcome)])
min_val <- min(oi, na.rm = TRUE)
result  <- ts[, "hospital"][which(oi == min_val)]
output  <- result[order(result)]
}
return(output)
}
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("D:/Coursera/R Programming/rprog_data_ProgAssignment3/outcome-of-care-measures.csv", colClasses = "character")
fd <- as.data.frame(cbind(data[,2], #hospital
data[,7], #state
data[,11], #Heart Attrack
data[,17], #Heart Failure
data[,23], #Pneumonia)
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital","state","heart attrack","heart failure","pneumonia")
## Check that state and outcome are valid
if ( !state %in% fd[ ,7]) {
stop('invalid state')
}else if(!outcome %in% c("heart attrack","heart failure","pneumonia")){
stop('invalid outcome')
}else{
si <- which(fd[,"state"]==state)
ts <- fs[si, ]
oi <- as.numeric(ts[,eval(outcome)])
min_val <- min(oi,na.rm = TRUE)
result <- ts[,"hospital"][which(oi==min_val)]
output <- result[order(result)]
}
return(output)
## Return hospital name in that state with lowest 30-day death
## rate
}
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("D:/Coursera/R Programming/rprog_data_ProgAssignment3/outcome-of-care-measures.csv", colClasses = "character")
fd <- as.data.frame(cbind(data[,2], #hospital
data[,7], #state
data[,11], #Heart Attrack
data[,17], #Heart Failure
data[,23], #Pneumonia)
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital","state","heart attrack","heart failure","pneumonia")
## Check that state and outcome are valid
if(!state %in% fd[, "state"]){
stop('invalid state')
}else if(!outcome %in% c("heart attrack","heart failure","pneumonia")){
stop('invalid outcome')
}else{
si <- which(fd[,"state"]==state)
ts <- fs[si, ]
oi <- as.numeric(ts[,eval(outcome)])
min_val <- min(oi,na.rm = TRUE)
result <- ts[,"hospital"][which(oi==min_val)]
output <- result[order(result)]
}
return(output)
## Return hospital name in that state with lowest 30-day death
## rate
}
best<-function(state, outcome){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", header=TRUE)
fd   <- as.data.frame(cbind(data[, 2],   # hospital
data[, 7],   # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if(!state %in% fd[, "state"]){
stop('invalid state')
} else if(!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]    # extracting data for the called state
oi <- as.numeric(ts[, eval(outcome)])
min_val <- min(oi, na.rm = TRUE)
result  <- ts[, "hospital"][which(oi == min_val)]
output  <- result[order(result)]
}
return(output)
}
best("TX", "heart attack")
best<-function(state, outcome){
data <- read.csv("D:/Coursera/R Programming/rprog_data_ProgAssignment3/outcome-of-care-measures.csv", colClasses = "character", header=TRUE)
fd   <- as.data.frame(cbind(data[, 2],   # hospital
data[, 7],   # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if(!state %in% fd[, "state"]){
stop('invalid state')
} else if(!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]    # extracting data for the called state
oi <- as.numeric(ts[, eval(outcome)])
min_val <- min(oi, na.rm = TRUE)
result  <- ts[, "hospital"][which(oi == min_val)]
output  <- result[order(result)]
}
return(output)
}
best<-function(state, outcome){
data <- outcome1
fd   <- as.data.frame(cbind(data[, 2],   # hospital
data[, 7],   # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if(!state %in% fd[, "state"]){
stop('invalid state')
} else if(!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]    # extracting data for the called state
oi <- as.numeric(ts[, eval(outcome)])
min_val <- min(oi, na.rm = TRUE)
result  <- ts[, "hospital"][which(oi == min_val)]
output  <- result[order(result)]
}
return(output)
}
best<-function(state, outcome){
data <- as.data.frame(outcome1)
fd   <- as.data.frame(cbind(data[, 2],   # hospital
data[, 7],   # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if(!state %in% fd[, "state"]){
stop('invalid state')
} else if(!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]    # extracting data for the called state
oi <- as.numeric(ts[, eval(outcome)])
min_val <- min(oi, na.rm = TRUE)
result  <- ts[, "hospital"][which(oi == min_val)]
output  <- result[order(result)]
}
return(output)
}
best("TX", "heart attack")
data <- as.data.frame(outcome1)
fd   <- as.data.frame(cbind(data[, 2],   # hospital
data[, 7],   # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
data <- as.data.frame(outcome1)
fd   <- as.data.frame(cbind(data[, 2],   # hospital
data[, 7],   # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
data <- as.data.frame(outcome1)
outcome1  <- read.csv("D:/Coursera/R Programming/rprog_data_ProgAssignment3/outcome-of-care-measures.csv",  header = T,colClasses = "character")
data <- outcome1
fd   <- as.data.frame(cbind(data[, 2],   # hospital
data[, 7],   # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
if(!state %in% fd[, "state"]){
stop('invalid state')
} else if(!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]    # extracting data for the called state
oi <- as.numeric(ts[, eval(outcome)])
min_val <- min(oi, na.rm = TRUE)
result  <- ts[, "hospital"][which(oi == min_val)]
output  <- result[order(result)]
if(!state %in% fd[, "state"]){
stop('invalid state')
} else if(!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]    # extracting data for the called state
oi <- as.numeric(ts[, eval(outcome)])
min_val <- min(oi, na.rm = TRUE)
result  <- ts[, "hospital"][which(oi == min_val)]
output  <- result[order(result)]
}
data
best<-function(state, outcome){
data <- outcome1
fd   <- as.data.frame(cbind(data[, 2],   # hospital
data[, 7],   # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if(!state %in% fd[, "state"]){
stop('invalid state')
} else if(!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]    # extracting data for the called state
oi <- as.numeric(ts[, eval(outcome)])
min_val <- min(oi, na.rm = TRUE)
result  <- ts[, "hospital"][which(oi == min_val)]
output  <- result[order(result)]
}
return(output)
}
best<-function(state, outcome){
data <- outcome1
fd   <- as.data.frame(cbind(data[, 2],   # hospital
data[, 7],   # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if(!state %in% fd[, "state"]){
stop('invalid state')
} else if(!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]    # extracting data for the called state
oi <- as.numeric(ts[, eval(outcome)])
min_val <- min(oi, na.rm = TRUE)
result  <- ts[, "hospital"][which(oi == min_val)]
output  <- result[order(result)]
}
return(output)
}
best<-function(state, outcome){
data <- outcome1
fd   <- as.data.frame(cbind(data[, 2],   # hospital
data[, 7],   # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if(!state %in% fd[, "state"]){
stop('invalid state')
} else if(!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]    # extracting data for the called state
oi <- as.numeric(ts[, eval(outcome)])
min_val <- min(oi, na.rm = TRUE)
result  <- ts[, "hospital"][which(oi == min_val)]
output  <- result[order(result)]
}
return(output)
}
source('~/.active-rstudio-document', echo=TRUE)
best<-function(state, outcome){
data <- outcome1
fd   <- as.data.frame(cbind(data[, 2],   # hospital
data[, 7],   # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if(!state %in% fd[, "state"]){
stop('invalid state')
} else if(!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]    # extracting data for the called state
oi <- as.numeric(ts[, eval(outcome)])
min_val <- min(oi, na.rm = TRUE)
result  <- ts[, "hospital"][which(oi == min_val)]
output  <- result[order(result)]
}
return(output)
}
best("TX", "heart attack")
?read.table
test1 <- read.table(D:/Coursera/Getting and Cleaning Data/UCI HAR Dataset
/test/Inertial Signals/body_acc_x_test.txt, head = F)
test1 <- read.table(D:\\Coursera\Getting and Cleaning Data\UCI HAR Dataset
\test\Inertial Signals\body_acc_x_test.txt, head = F)
test1 <- read.table("D:/Coursera/Getting and Cleaning Data/UCI HAR Dataset
/test/Inertial Signals/body_acc_x_test.txt", head = F)
rt <- setwd("D:/Coursera/Getting and Cleaning Data/UCI HAR Dataset
/test/Inertial Signals")
setwd("D:/Coursera/Getting and Cleaning Data/UCI HAR Dataset
/test/Inertial Signals")
read.table
setwd("D:/Coursera/Getting and Cleaning Data/UCI HAR Dataset
/test/Inertial Signals")
?setwd
setwd(D:/Coursera/Getting and Cleaning Data/UCI HAR Dataset
/test/Inertial Signals)
setwd(D:\Coursera\Getting and Cleaning Data\UCI HAR Dataset
\test\Inertial Signals)
setwd(D:\\Coursera\\Getting and Cleaning Data\\UCI HAR Dataset
\\test\\Inertial Signals)
setwd('D:\Coursera\Getting and Cleaning Data\UCI HAR Dataset\test\Inertial Signals')
setwd("D:/Coursera/Getting and Cleaning Data/UCI HAR Dataset/test/Inertial Signals")
body_acc_x_test <- read.table("body_acc_x_test.txt", head = F)
body_acc_x_test
nrow(body_acc_x_test)
ncol(body_acc_x_test)
read.table("subject_test.txt",header = F)
setwd("D:/Coursera/Getting and Cleaning Data/UCI HAR Dataset/test")
read.table("subject_test.txt",header = F)
nrow(body_acc_x_test)
ncol(body_acc_x_test)
subject_test <- read.table("subject_test.txt",header = F)
head(subject_test)
y_test <-read.table("y_test.txt",header = F)
head(y_test)
X_test <-read.table("X_test.txt",header = F)
head(X_test)
nrow(body_acc_x_test)
ncol(body_acc_x_test)
X_test
setwd("D:/Coursera/Getting and Cleaning Data/UCI HAR Dataset/test/Inertial Signals")
body_acc_x_test <- read.table("body_acc_x_test.txt", head = F)
body_acc_y_test <- read.table("body_acc_y_test.txt", head = F)
body_acc_z_test <- read.table("body_acc_z_test.txt", head = F)
nrow(body_acc_x_test)
ncol(body_acc_x_test)
nrow(body_acc_y_test)
ncol(body_acc_y_test)
nrow(body_acc_z_test)
ncol(body_acc_z_test)
setwd("D:/Coursera/Getting and Cleaning Data/UCI HAR Dataset/test")
subject_test <- read.table("subject_test.txt",header = F)
View(subjet_test)
setwd("D:/Coursera/Getting and Cleaning Data/UCI HAR Dataset/test")
subject_test <- read.table("subject_test.txt",header = F)
View(subjet_test)
subjet_test <- read.table("subject_test.txt",header = F)
View(subjet_test)
y_test <-read.table("y_test.txt",header = F)
View(y_test)
View(X_test)
X_test <-read.table("X_test.txt",header = F)
View(X_test)
?names
names(y_test) <- "activity"
View(y_test)
head(y_test)
X_test <-read.table("X_test.txt",header = F)
features <- read.table("features.txt",header = F)
setwd("D:/Coursera/Getting and Cleaning Data/UCI HAR Dataset")
features <- read.table("features.txt",header = F)
View(features)
test <- cbind(subjet_test,y_test,X_test)
View(test)
setwd("D:/Coursera/Getting and Cleaning Data/UCI HAR Dataset/train")
subjet_train <- read.table("subject_train.txt",header = F)
y_train <-read.table("y_train.txt",header = F)
names(y_train) <- "activity"
head(y_train)
X_train <-read.table("X_train.txt",header = F)
head(X_train)
train <- cbind(subjet_train,y_test,X_train)
setwd("D:/Coursera/Getting and Cleaning Data/UCI HAR Dataset")
subjet_test <- read.table("./test/subject_test.txt",header = F)
subjet_train <- read.table("./train/subject_train.txt",header = F)
Activity_test <-read.table("./test/y_test.txt",header = F)
Activity_train <-read.table("./train/y_train.txt",header = F)
names(y_test) <- "activity"
names(y_train) <- "activity"
Feature_test <-read.table("./test/X_test.txt",header = F)
Feature_train <-read.table("./train/X_train.txt",header = F)
activity_labels <- read.table("activity_labels", header=F)
activity_labels <- read.table("./activity_labels", header=F)
activity_labels <- read.table("./activity_labels.txt", header=F)
featuresNames <- read.table("./features.txt",header = F)
View(activity_labels)
FeaturesData <- rbind(FeaturesTest, FeaturesTrain)
SubjectData <- rbind(SubjectTest, SubjectTrain)
ActivityData <- rbind(ActivityTest, ActivityTrain)
FeaturesData <- rbind(Feature_test, Feature_train)
SubjectData <- rbind(subject_test, subject_train)
ActivityData <- rbind(Activity_test, Activity_train)
FeaturesData <- rbind(Feature_test, Feature_train)
SubjectData <- rbind(subject_test, subject_train)
subject_test <- read.table("./test/subject_test.txt",header = F)
subject_train <- read.table("./train/subject_train.txt",header = F)
SubjectData <- rbind(subject_test, subject_train)
ActivityData <- rbind(Activity_test, Activity_train)
####Renaming colums in ActivityData & ActivityLabels dataframes
names(ActivityData) <- "ActivityN"
View(activity_labels)
names(activity_Labels) <- c("ActivityN", "Activity")
names(activity_labels) <- c("ActivityN", "Activity")
Activity <- left_join(ActivityData, ActivityLabels, "ActivityN")[, 2]
library(data.table)
library(dplyr)
install.packages("dplyr")
library(dplyr)
library("dplyr", lib.loc="C:/Program Files/R/R-3.3.0/library")
library(dplyr)
Activity <- left_join(ActivityData, ActivityLabels, "ActivityN")[, 2]
?merge.data.frame
Activity <- merge(ActivityData, ActivityLabels, by.x="ActivityN", by.y="ActivityN")
names(ActivityData) <- "ActivityN"
names(activity_labels) <- c("ActivityN", "Activity")
Activity <- merge(ActivityData, ActivityLabels, by.x="ActivityN", by.y="ActivityN")
Activity <- merge(ActivityData, activity_labels, by.x="ActivityN", by.y="ActivityN")
View(Activity)
names(SubjectData) <- "Subject"
names(FeaturesData) <- FeaturesNames$V2
View(FeaturesData)
View(SubjectData)
names(FeaturesData) <- FeaturesNames$V2
names(FeaturesData$V2) <- FeaturesNames
names(FeaturesData$V2) <- "FeaturesNames"
View(FeaturesData)
names(FeaturesData) <- featuresNames$V2
DataSet <- cbind(SubjectData, Activity)
DataSet <- cbind(DataSet, FeaturesData)
View(DataSet)
?subset
?grep
View(featuresNames)
subFeaturesNames <- FeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", featuresName$V2)]
subFeaturesNames <- featuresNames$V2[grep("mean\\(\\)|std\\(\\)", featuresName$V2)]
subFeaturesNames <- featuresNames$V2[grep("mean\\(\\)|std\\(\\)", featuresNames$V2)]
DataNames <- c("Subject", "Activity", as.character(subFeaturesNames))
DataSet <- subset(DataSet, select=DataNames)
#####Rename the columns of the large dataset using more descriptive activity names
names(DataSet)<-gsub("^t", "time", names(DataSet))
names(DataSet)<-gsub("^f", "frequency", names(DataSet))
names(DataSet)<-gsub("Acc", "Accelerometer", names(DataSet))
names(DataSet)<-gsub("Gyro", "Gyroscope", names(DataSet))
names(DataSet)<-gsub("Mag", "Magnitude", names(DataSet))
names(DataSet)<-gsub("BodyBody", "Body", names(DataSet))
?gsub
####Create a second, independent tidy data set with the average of each variable for each activity and each subject
SecondDataSet<-aggregate(. ~Subject + Activity, DataSet, mean)
SecondDataSet<-SecondDataSet[order(SecondDataSet$Subject,SecondDataSet$Activity),]
#Save this tidy dataset to local file
write.table(SecondDataSet, file = "tidydata.txt",row.name=FALSE)
